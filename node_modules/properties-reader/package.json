{
  "name": "properties-reader",
  "description": "Properties file reader for Node.js",
  "version": "0.0.13",
  "author": {
    "name": "Steve King",
    "email": "steve@mydev.co"
  },
  "contributors": [
    {
      "name": "Steve King",
      "email": "steve@mydev.co"
    },
    {
      "name": "Aureliano Bergese",
      "email": "onailerua@hotmail.coom"
    }
  ],
  "dependencies": {
    "mkdirp": "~0.3.5"
  },
  "devDependencies": {
    "unit-test": "*"
  },
  "keywords": [
    "properties",
    "ini",
    "parser"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/steveukx/properties"
  },
  "main": "src/PropertiesReader",
  "bin": {},
  "scripts": {
    "test": "node test/runner.js"
  },
  "license": "MIT",
  "engines": {
    "node": ">= 0.4.1"
  },
  "readme": "Properties-Reader\n=================\n\nAn ini file compatible properties reader for [Node.JS](http://nodejs.org)\n\nInstallation\n============\n\nThe easiest installation is through [NPM](http://npmjs.org):\n\n    npm install properties-reader\n\nOr clone the repo https://github.com/steveukx/properties and include the `/src/PropertiesReader.js` script.\n\nAPI\n===\n\nRead properties from a file:\n\n    var PropertiesReader = require('properties-reader');\n    var properties = PropertiesReader('/path/to/properties.file');\n\nThe properties are then accessible either by fully qualified name, or if the property names are in dot-delimited\nnotation, they can be access as an object:\n\n    // fully qualified name\n    var property = properties.get('some.property.name');\n\n    // by object path\n    var property = properties.path().some.property.name;\n\nTo read more than one file, chain calls to the `.append()` method:\n\n    properties.append('/another.file').append('/yet/another.file');\n\nTo read properties from a string, use the `.read()` method:\n\n    properties.read('some.property = Value \\n another.property = Another Value');\n\nTo set a single property into the properties object, use `.set()`:\n\n    properties.set('property.name', 'Property Value');\n\nWhen reading a `.ini` file, sections are created by having a line that contains just a section name in square\nbrackets. The section name is then prefixed to all property names that follow it until another section name is found\nto replace the current section.\n\n    # contents of properties file\n    [main]\n    some.thing = foo\n\n    [blah]\n    some.thing = bar\n\n    // reading these back from the properties reader\n    properties.get('main.some.thing') == 'foo';\n    properties.get('blah.some.thing') == 'bar';\n\nChecking for the current number of properties that have been read into the reader:\n\n    var propertiesCount = properties.length;\n\nThe length is calculated on request, so if accessing this in a loop an efficiency would be achieved by caching the\nvalue.\n\nWhen duplicate names are found in the properties, the first one read will be replaced with the later one.\n\nData Types\n==========\n\nProperties will automatically be converted to their regular data types when they represent true/false or numeric\nvalues. To get the original value without any parsing / type coercion applied, use `properties.getRaw('path.to.prop')`.\n\nContributions\n=============\n\nIf you find bugs or want to change functionality, feel free to fork and pull request.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/steveukx/properties/issues"
  },
  "_id": "properties-reader@0.0.13",
  "dist": {
    "shasum": "70341526f20b9703ad33b2390af175def17c08c0"
  },
  "_from": "properties-reader@0.0.13",
  "_resolved": "https://registry.npmjs.org/properties-reader/-/properties-reader-0.0.13.tgz"
}
